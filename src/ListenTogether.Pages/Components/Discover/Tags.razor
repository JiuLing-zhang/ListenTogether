@using System.Collections.Concurrent;
@inject IMusicNetworkService _musicNetworkService

@if (_platformMusicTag == null)
{
    <div Class="d-flex">
        <MudSkeleton Class="ml-2" SkeletonType="SkeletonType.Rectangle" Height="30px" Width="60px" />
        <MudSkeleton Class="ml-2" SkeletonType="SkeletonType.Rectangle" Height="30px" Width="60px" />
        <MudSkeleton Class="ml-2" SkeletonType="SkeletonType.Rectangle" Height="30px" Width="60px" />
        <MudSkeleton Class="ml-2" SkeletonType="SkeletonType.Rectangle" Height="30px" Width="60px" />
    </div>
}
else
{
    <MudChip Label="true"
             OnClick="@(() => TopClickedAsync())"
             Disabled="@(ActiveTagId == "榜单")"
             Style="padding:0 6px;"
             Size="Size.Small">榜单</MudChip>
    @foreach (var hotTag in _platformMusicTag.HotTags)
    {
        <MudChip Label="true"
                 OnClick="@(() => HotTagClickedAsync(hotTag.Id))"
                 Disabled="@(ActiveTagId == hotTag.Id)"
                 Style="padding:0 6px;"
                 Size="Size.Small">@hotTag.Name</MudChip>
    }
    <MudChip Label="true"
             OnClick="OpenChooseTag"
             Style="padding:0 6px;"
             Size="Size.Small">选择分类</MudChip>

    <div class="choose-tag-drawer @_isOpenChooseTag" @onclick="CloseChooseTag">
        <ChooseTag OnTagSelected="TagSelected" AllTypes="@(_platformMusicTag.AllTypes)" />
    </div>
}

@code {
    [Parameter]
    public PlatformEnum Platform { get; set; }
    [Parameter]
    public string ActiveTagId { get; set; }
    [Parameter]
    public EventCallback<string> OnTagSelect { get; set; }

    private string _currentQueryString = "";

    private static readonly ConcurrentDictionary<PlatformEnum, PlatformMusicTag> _platformMusicTags = new ConcurrentDictionary<PlatformEnum, PlatformMusicTag>();
    private PlatformMusicTag? _platformMusicTag => GetPlatformMusicTag(Platform);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var platform = Platform;
        var queryString = $"{platform}-{ActiveTagId}";
        if (queryString == _currentQueryString)
        {
            return;
        }
        _currentQueryString = queryString;

        if (_platformMusicTag == null)
        {
            var platformMusicTag = await _musicNetworkService.GetMusicTagsAsync(platform);
            if (platformMusicTag == null)
            {
                return;
            }
            _platformMusicTags.TryAdd(platform, platformMusicTag);
        }
    }

    private PlatformMusicTag? GetPlatformMusicTag(PlatformEnum platform)
    {
        PlatformMusicTag? platformMusicTag;
        if (!_platformMusicTags.TryGetValue(platform, out platformMusicTag))
        {
            return default;
        }
        return platformMusicTag;
    }

    private async Task TopClickedAsync()
    {
        await OnTagSelect.InvokeAsync("榜单");
    }

    private async Task HotTagClickedAsync(string id)
    {
        await OnTagSelect.InvokeAsync(id);
    }

    private string _isOpenChooseTag = "";
    private void OpenChooseTag()
    {
        _isOpenChooseTag = "open";
    }
    private void CloseChooseTag()
    {
        _isOpenChooseTag = "";
    }
    private void TagSelected(string value)
    {
        CloseChooseTag();
        OnTagSelect.InvokeAsync(value);
    }
}
