<div class="d-flex align-center">
    <div class="flex-grow-1 d-flex align-center" @onclick="OpenPlayingPageAsync">
        <img src="@(Music==null ?"https://jiuling.cc/images/music.svg":Music.ImageUrl)"
             class="rounded-lg pt-1 pb-1 mr-2 small-img" />
        <div class="flex-grow-1">@($"{Music?.Name} - {Music?.Artist}")</div>
    </div>

    <MudToggleIconButton Class="flex-grow-0 ml-2"
                         Size="Size.Small"
                         Disabled="@(Music==null)"
                         Toggled="@IsPlaying"
                         ToggledChanged="PlayAsync"
                         Icon="fa-regular fa-circle-play"
                         ToggledSize="Size.Small"
                         ToggledIcon="fa-solid fa-circle-pause" />
</div>
@code {

    private bool _isFirstPlay = true;
    private bool _isPlayProgressDragging = false;

    [Parameter]
    public LocalMusic? Music { get; set; }
    [Parameter]
    public bool IsPlaying { get; set; }

    private double _playProgress;
    private MusicPosition? _position;
    [Parameter]
    public MusicPosition? Position
    {
        get => _position;
        set
        {
            _position = value;
            if (_position != null && _isFirstPlay)
            {
                _isFirstPlay = false;
            }
            if (!_isPlayProgressDragging)
            {
                _playProgress = (_position?.PlayProgress ?? 0) * 100;
            }
        }
    }

    [Parameter]
    public string RepeatIcon { get; set; } = null!;

    [Parameter]
    public string SoundIcon { get; set; } = null!;

    [Parameter]
    public int Volume { get; set; }

    [Parameter]
    public EventCallback OnPrevious { get; set; }
    [Parameter]
    public EventCallback OnPlay { get; set; }
    [Parameter]
    public EventCallback OnNext { get; set; }
    [Parameter]
    public EventCallback OnOpenPlayingPage { get; set; }
    [Parameter]
    public EventCallback<double> OnProgressChanged { get; set; }
    [Parameter]
    public EventCallback OnRepeatChanged { get; set; }
    [Parameter]
    public EventCallback<LocalMusic> OnAddToMyFavorite { get; set; }
    [Parameter]
    public EventCallback OnSoundChanged { get; set; }
    [Parameter]
    public EventCallback<int> OnVolumeChanged { get; set; }
    [Parameter]
    public EventCallback OnGotoAutoClosePage { get; set; }

    private async Task PreviousAsync()
    {
        await OnPrevious.InvokeAsync();
    }

    private async Task PlayAsync(bool toggled)
    {
        _isFirstPlay = false;
        await OnPlay.InvokeAsync();
    }

    private async Task NextAsync()
    {
        await OnNext.InvokeAsync();
    }
    private async Task OpenPlayingPageAsync()
    {
        if (_isFirstPlay)
        {
            return;
        }
        await OnOpenPlayingPage.InvokeAsync();
    }

    private void ProgressMouseDown()
    {
        _isPlayProgressDragging = true;
    }

    private void ProgressMouseUp()
    {
        _isPlayProgressDragging = false;
    }

    private async Task ChangeProgressAsync(double value)
    {
        _playProgress = value;
        if (!_isPlayProgressDragging)
        {
            return;
        }
        await OnProgressChanged.InvokeAsync(_playProgress / 100);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeRepeatAsync()
    {
        await OnRepeatChanged.InvokeAsync();
    }

    private async Task AddToMyFavoriteAsync(LocalMusic? music)
    {
        if (music == null)
        {
            return;
        }
        await OnAddToMyFavorite.InvokeAsync(music);
    }
    private async Task ChangeSoundAsync()
    {
        await OnSoundChanged.InvokeAsync();
    }
    private async Task ChangeVolumeAsync(int value)
    {
        Volume = value;
        await OnVolumeChanged.InvokeAsync(Volume);
    }

    private async Task GotoAutoClosePage()
    {
        await OnGotoAutoClosePage.InvokeAsync(Volume);
    }
}
