@inherits MyComponentBase

@inject MusicPlayerService _playerService
@inject IPlaylistService _playlistService
@inject IEnvironmentConfigService _configService
@inject IDialogService DialogService
@inject IPlayHistoryStorage PlayHistoryStorage
@inject NavigationManager NavigationManager

<DesktopView OnOpenPlayingPage="OpenPlayingPageAsync"
             Music="@(_music)"
             IsPlaying="@(_isPlaying)"
             RepeatIcon="@(_repeatIcon)"
             SoundIcon="@(_soundIcon)"
             Volume="@(_volume)"
             OnVolumeChanged="ChangeVolumeAsync"
             OnProgressChanged="ChangeProgressAsync"
             Position="@(_position)"
             OnPlay="PlayAsync"
             OnNext="NextAsync"
             OnPrevious="PreviousAsync"
             OnAddToMyFavorite="AddToMyFavoriteAsync"
             OnRepeatChanged="ChangeRepeatAsync"
             OnSoundChanged="ChangeSoundAsync"
             OnGotoAutoClosePage="GotoAutoClosePage" />

@code {
    [Parameter]
    public EventCallback OnOpenPlayingPage { get; set; }
    private LocalMusic? _music;
    private string _repeatIcon = "fa-solid fa-repeat";
    private string _soundIcon = "fas fa-volume-down";
    private bool _isPlaying = false;
    private MusicPosition? _position;
    private int _volume;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await UpdateCurrentMusicAsync();

        _playerService.IsPlayingChanged += async (_, __) => await PlayingChangedAsync();
        _playerService.NewMusicAdded += async (_, __) => await NewMusicAddedAsync();
        _playerService.PositionChanged += async (_, __) => await PositionChangedAsync();

        UpdateRepeatModel();

        UpdateSoundOnOff().Wait();
        UpdateVolume().Wait();
    }

    private async Task OpenPlayingPageAsync()
    {
        await OnOpenPlayingPage.InvokeAsync();
    }

    private async Task PlayingChangedAsync()
    {
        _isPlaying = _playerService.IsPlaying;
        await InvokeAsync(StateHasChanged);
    }
    private async Task NewMusicAddedAsync()
    {
        var metadata = _playerService.Metadata;
        if (metadata == null)
        {
            return;
        }
        await PlayHistoryStorage.SetLastMusicIdAsync(metadata.Id);
        await ReadLocalMusicFromPlaylist(metadata.Id);
        await InvokeAsync(StateHasChanged);
    }

    private async Task PositionChangedAsync()
    {
        _position = _playerService.CurrentPosition;
        await InvokeAsync(StateHasChanged);
    }

    public async Task PlayAsync()
    {
        string musicId = _playerService.Metadata?.Id ?? "";
        if (musicId.IsEmpty())
        {
            musicId = _music?.Id ?? "";
        }
        if (musicId.IsNotEmpty())
        {
            await _playerService.PlayAsync(musicId);
        }
    }

    private async Task PreviousAsync()
    {
        await _playerService.Previous();
    }

    private async Task NextAsync()
    {
        await _playerService.Next();
    }

    private async Task UpdateCurrentMusicAsync()
    {
        var musicId = await PlayHistoryStorage.GetLastMusicIdAsync();
        if (musicId.IsEmpty())
        {
            return;
        }
        await ReadLocalMusicFromPlaylist(musicId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReadLocalMusicFromPlaylist(string musicId)
    {
        var playlist = await _playlistService.GetOneAsync(musicId);
        if (playlist == null)
        {
            return;
        }
        _music = new LocalMusic()
            {
                Id = playlist.Id,
                IdOnPlatform = playlist.IdOnPlatform,
                Platform = playlist.Platform,
                Name = playlist.Name,
                Album = playlist.Album,
                Artist = playlist.Artist,
                ExtendDataJson = playlist.ExtendDataJson,
                ImageUrl = playlist.ImageUrl
            };
    }

    private void UpdateRepeatModel()
    {
        switch (Settings.Environment.Player.PlayMode)
        {
            case PlayModeEnum.RepeatOne:
                _repeatIcon = "fa-solid fa-1";
                break;

            case PlayModeEnum.RepeatList:
                _repeatIcon = "fa-solid fa-repeat";
                break;

            case PlayModeEnum.Shuffle:
                _repeatIcon = "fa-solid fa-shuffle";
                break;
            default:
                _repeatIcon = "fa-solid fa-repeat";
                break;
        }
    }

    private async Task ChangeRepeatAsync()
    {
        SetNextRepeatMode();
        UpdateRepeatModel();
        await WritePlayerSettingAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void SetNextRepeatMode()
    {
        if (Settings.Environment.Player.PlayMode == PlayModeEnum.RepeatOne)
        {
            Settings.Environment.Player.PlayMode = PlayModeEnum.RepeatList;
            return;
        }

        if (Settings.Environment.Player.PlayMode == PlayModeEnum.RepeatList)
        {
            Settings.Environment.Player.PlayMode = PlayModeEnum.Shuffle;
            return;
        }

        if (Settings.Environment.Player.PlayMode == PlayModeEnum.Shuffle)
        {
            Settings.Environment.Player.PlayMode = PlayModeEnum.RepeatOne;
            return;
        }
    }
    private async Task WritePlayerSettingAsync()
    {
        await _configService.WritePlayerSettingAsync(Settings.Environment.Player);
    }

    private async Task UpdateSoundOnOff()
    {
        if (Settings.Environment.Player.IsSoundOff)
        {
            _soundIcon = "fas fa-volume-mute";
        }
        else
        {
            _soundIcon = "fas fa-volume-down";
        }
        await _playerService.SetMuted(Settings.Environment.Player.IsSoundOff);
    }
    private async Task UpdateVolume()
    {
        _volume = (int)Settings.Environment.Player.Volume;
        await _playerService.SetVolume((int)Settings.Environment.Player.Volume);
    }

    private async Task ChangeSoundAsync()
    {
        Settings.Environment.Player.IsSoundOff = !Settings.Environment.Player.IsSoundOff;
        await WritePlayerSettingAsync();
        await UpdateSoundOnOff();
    }
    private async Task ChangeVolumeAsync(int value)
    {
        _volume = value;
        await _playerService.SetVolume(_volume);
        Settings.Environment.Player.Volume = _volume;
        await WritePlayerSettingAsync();
    }

    private async Task ChangeProgressAsync(double value)
    {
        if (_playerService.Metadata != null)
        {
            var positionMillisecond = _playerService.CurrentPosition.Duration.TotalMilliseconds * value;
            await _playerService.SetPlayPosition(positionMillisecond);
        }
    }

    private async Task AddToMyFavoriteAsync(LocalMusic music)
    {
        var parameters = new DialogParameters { ["Music"] = music };
        var dialog = await DialogService.ShowAsync<AddToMyFavorite>("", parameters);
        await dialog.Result;
    }
    private void GotoAutoClosePage()
    {
        NavigationManager.NavigateTo("/auto-close");
    }
}
