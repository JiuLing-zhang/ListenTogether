@inherits MyComponentBase

<div class="d-flex align-center justify-center player-main">
    <div class="d-flex align-center play-control">
        <MudIconButton Size="Size.Medium"
                       Icon="fa-solid fa-backward-step"
                       Disabled="@(Music==null)"
                       OnClick="PreviousAsync" />
        <MudToggleIconButton Size="Size.Large"
                             Disabled="@(Music==null)"
                             Toggled="@IsPlaying"
                             ToggledChanged="PlayAsync"
                             Icon="fa-regular fa-circle-play"
                             ToggledSize="Size.Large"
                             ToggledIcon="fa-solid fa-circle-pause" />
        <MudIconButton Size="Size.Medium"
                       Disabled="@(Music==null)"
                       Icon="fa-solid fa-forward-step"
                       OnClick="NextAsync" />
    </div>
    <div class="d-flex align-center ml-6 mr-6 music-info">
        <div @onclick="OpenPlayingPageAsync" class="music-image @((!_isFirstPlay)?"image-hover":"")">
            <MudImage Src="@(Music==null ?"https://jiuling.cc/images/music.svg":Music.ImageUrl)"
                      Height="45"
                      Width="45"
                      Class="rounded-lg" />
            <div class="mask">
                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.KeyboardArrowUp"></MudIcon>
            </div>
        </div>
        <div class="music-detail">
            <div class="d-flex justify-space-between align-end">
                <div class="music-title">
                    <MudText Typo="Typo.subtitle1"> @($"{Music?.Name} - {Music?.Artist}") </MudText>
                </div>
                <div class="time">
                    <MudText Typo="Typo.caption"> @($"{Position?.position.Minutes:D2}:{Position?.position.Seconds:D2}") / @($"{Position?.Duration.Minutes:D2}:{Position?.Duration.Seconds:D2}") </MudText>
                </div>
            </div>
            <MudSlider Min="0"
                       Max="100"
                       Size="Size.Small"
                       Value="_playProgress"
                       T="double"
                       @onmousedown="ProgressMouseDown"
                       @onmouseup="ProgressMouseUp"
                       ValueChanged="ChangeProgressAsync"
                       Variant="Variant.Filled" />

        </div>
    </div>
    <div class="d-flex align-center other">
        <MudIconButton Size="Size.Small"
                       Disabled="@(Music==null)"
                       Icon="@RepeatIcon"
                       OnClick="ChangeRepeatAsync" />

        <MudIconButton Class="ml-2"
                       Disabled="@(Music==null)"
                       Size="Size.Small"
                       Icon="fa-solid fa-folder-plus"
                       OnClick="@(()=>AddToMyFavoriteAsync(Music))" />

        <MudIconButton Class="ml-2"
                       Disabled="@(Music==null)"
                       Size="Size.Small"
                       Icon="fas fa-clock"
                       OnClick="@(()=>GotoAutoClosePage())" />

        <MudIconButton Class="ml-2"
                       Disabled="@(Music==null)"
                       Size="Size.Small"
                       Icon="@SoundIcon"
                       OnClick="ChangeSoundAsync" />
        <MudSlider Class="ml-1"
                   Value="@Volume"
                   Style="width:100px"
                   ValueLabel="true"
                   Size="Size.Small"
                   Variant="Variant.Filled"
                   T="int"
                   ValueChanged="ChangeVolumeAsync" />
    </div>
</div>

@code {

    private bool _isFirstPlay = true;
    private bool _isPlayProgressDragging = false;

    [Parameter]
    public LocalMusic? Music { get; set; }
    [Parameter]
    public bool IsPlaying { get; set; }

    private double _playProgress;
    private MusicPosition? _position;
    [Parameter]
    public MusicPosition? Position
    {
        get => _position;
        set
        {
            _position = value;
            if (_position != null && _isFirstPlay)
            {
                _isFirstPlay = false;
            }
            if (!_isPlayProgressDragging)
            {
                _playProgress = (_position?.PlayProgress ?? 0) * 100;
            }
        }
    }

    [Parameter]
    public string RepeatIcon { get; set; } = null!;

    [Parameter]
    public string SoundIcon { get; set; } = null!;

    [Parameter]
    public int Volume { get; set; }

    [Parameter]
    public EventCallback OnPrevious { get; set; }
    [Parameter]
    public EventCallback OnPlay { get; set; }
    [Parameter]
    public EventCallback OnNext { get; set; }
    [Parameter]
    public EventCallback OnOpenPlayingPage { get; set; }
    [Parameter]
    public EventCallback<double> OnProgressChanged { get; set; }
    [Parameter]
    public EventCallback OnRepeatChanged { get; set; }
    [Parameter]
    public EventCallback<LocalMusic> OnAddToMyFavorite { get; set; }
    [Parameter]
    public EventCallback OnSoundChanged { get; set; }
    [Parameter]
    public EventCallback<int> OnVolumeChanged { get; set; }
    [Parameter]
    public EventCallback OnGotoAutoClosePage { get; set; }

    private async Task PreviousAsync()
    {
        await OnPrevious.InvokeAsync();
    }

    private async Task PlayAsync(bool toggled)
    {
        _isFirstPlay = false;
        await OnPlay.InvokeAsync();
    }

    private async Task NextAsync()
    {
        await OnNext.InvokeAsync();
    }
    private async Task OpenPlayingPageAsync()
    {
        if (_isFirstPlay)
        {
            return;
        }
        await OnOpenPlayingPage.InvokeAsync();
    }

    private void ProgressMouseDown()
    {
        _isPlayProgressDragging = true;
    }

    private void ProgressMouseUp()
    {
        _isPlayProgressDragging = false;
    }

    private async Task ChangeProgressAsync(double value)
    {
        _playProgress = value;
        if (!_isPlayProgressDragging)
        {
            return;
        }
        await OnProgressChanged.InvokeAsync(_playProgress / 100);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeRepeatAsync()
    {
        await OnRepeatChanged.InvokeAsync();
    }

    private async Task AddToMyFavoriteAsync(LocalMusic? music)
    {
        if (music == null)
        {
            return;
        }
        await OnAddToMyFavorite.InvokeAsync(music);
    }
    private async Task ChangeSoundAsync()
    {
        await OnSoundChanged.InvokeAsync();
    }
    private async Task ChangeVolumeAsync(int value)
    {
        Volume = value;
        await OnVolumeChanged.InvokeAsync(Volume);
    }

    private async Task GotoAutoClosePage()
    {
        await OnGotoAutoClosePage.InvokeAsync();
    }
}
