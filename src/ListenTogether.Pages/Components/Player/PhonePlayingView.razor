@inherits MyComponentBase

<div class="player-main">
    <div class="d-flex align-center justify-end">
        <div>时间</div>
        <MudIconButton Class="ml-2"
                       Size="Size.Small"
                       Style="color:var(--mud-palette-white);"
                       Icon="fas fa-clock"
                       OnClick="@(()=>GotoAutoClosePage())" />
    </div>

    <div class="d-flex align-center justify-space-between mt-2 mb-2">
        <div class="time">
            @($"{Position?.position.Minutes:D2}:{Position?.position.Seconds:D2}")
        </div>
        <MudSlider Class="ml-2 mr-2"
                   Min="0"
                   Max="100"
                   Size="Size.Small"
                   Value="_playProgress"
                   T="double"
                   @onmousedown="ProgressMouseDown"
                   @onmouseup="ProgressMouseUp"
                   ValueChanged="ChangeProgressAsync"
                   Variant="Variant.Filled" />
        <div class="time">
            @($"{Position?.Duration.Minutes:D2}:{Position?.Duration.Seconds:D2}")
        </div>
    </div>

    <div class="d-flex align-center justify-space-around">
        <MudIconButton Size="Size.Small"
                       Style="color:var(--mud-palette-white);"
                       Icon="@RepeatIcon"
                       OnClick="ChangeRepeatAsync" />
        <MudIconButton Size="Size.Medium"
                       Icon="fa-solid fa-backward-step"
                       Style="color:var(--mud-palette-white);"
                       OnClick="PreviousAsync" />
        <MudToggleIconButton Size="Size.Large"
                             Style="color:var(--mud-palette-white);"
                             Toggled="@IsPlaying"
                             ToggledChanged="PlayAsync"
                             Icon="fa-regular fa-circle-play"
                             ToggledSize="Size.Large"
                             ToggledIcon="fa-solid fa-circle-pause" />
        <MudIconButton Size="Size.Medium"
                       Style="color:var(--mud-palette-white);"
                       Icon="fa-solid fa-forward-step"
                       OnClick="NextAsync" />
        <MudIconButton Class="ml-2"
                       Style="color:var(--mud-palette-white);"
                       Size="Size.Small"
                       Icon="fas fa-folder-plus"
                       OnClick="@(()=>AddToMyFavoriteAsync(Music))" />
    </div>
</div>

@code {

    private bool _isPlayProgressDragging = false;

    [Parameter]
    public LocalMusic? Music { get; set; }
    [Parameter]
    public bool IsPlaying { get; set; }

    private double _playProgress;
    private MusicPosition? _position;
    [Parameter]
    public MusicPosition? Position
    {
        get => _position;
        set
        {
            _position = value;
            if (!_isPlayProgressDragging)
            {
                _playProgress = (_position?.PlayProgress ?? 0) * 100;
            }
        }
    }

    [Parameter]
    public string RepeatIcon { get; set; } = null!;

    [Parameter]
    public string SoundIcon { get; set; } = null!;

    [Parameter]
    public int Volume { get; set; }

    [Parameter]
    public EventCallback OnPrevious { get; set; }
    [Parameter]
    public EventCallback OnPlay { get; set; }
    [Parameter]
    public EventCallback OnNext { get; set; }
    [Parameter]
    public EventCallback<double> OnProgressChanged { get; set; }
    [Parameter]
    public EventCallback OnRepeatChanged { get; set; }
    [Parameter]
    public EventCallback<LocalMusic> OnAddToMyFavorite { get; set; }
    [Parameter]
    public EventCallback OnSoundChanged { get; set; }
    [Parameter]
    public EventCallback<int> OnVolumeChanged { get; set; }
    [Parameter]
    public EventCallback OnGotoAutoClosePage { get; set; }

    private async Task PreviousAsync()
    {
        await OnPrevious.InvokeAsync();
    }

    private async Task PlayAsync(bool toggled)
    {
        await OnPlay.InvokeAsync();
    }

    private async Task NextAsync()
    {
        await OnNext.InvokeAsync();
    }


    private void ProgressMouseDown()
    {
        _isPlayProgressDragging = true;
    }

    private void ProgressMouseUp()
    {
        _isPlayProgressDragging = false;
    }

    private async Task ChangeProgressAsync(double value)
    {
        _playProgress = value;
        if (!_isPlayProgressDragging)
        {
            return;
        }
        await OnProgressChanged.InvokeAsync(_playProgress / 100);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeRepeatAsync()
    {
        await OnRepeatChanged.InvokeAsync();
    }

    private async Task AddToMyFavoriteAsync(LocalMusic? music)
    {
        if (music == null)
        {
            return;
        }
        await OnAddToMyFavorite.InvokeAsync(music);
    }
    private async Task ChangeSoundAsync()
    {
        await OnSoundChanged.InvokeAsync();
    }
    private async Task ChangeVolumeAsync(int value)
    {
        Volume = value;
        await OnVolumeChanged.InvokeAsync(Volume);
    }

    private async Task GotoAutoClosePage()
    {
        await OnGotoAutoClosePage.InvokeAsync(Volume);
    }
}
