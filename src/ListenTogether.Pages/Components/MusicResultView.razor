@inherits MyComponentBase

@inject IDialogService DialogService
@inject MusicResultService MusicResultService
@if (Musics == null)
{
    <MudSkeleton Class="mt-3" Height="30px" />
    <MudSkeleton Class="mt-3" Height="30px" />
    <MudSkeleton Class="mt-3" Height="30px" />
    <MudSkeleton Class="mt-3" Height="30px" />
    <MudSkeleton Class="mt-3" Height="30px" />
    <MudSkeleton Class="mt-3" Height="30px" />
}
else
{
    var desktopIndex = 1;
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudTable Items="@Musics"
              @ondblclick="@(()=>TableDoubleClick())"
              Dense="true"
              Hover="true"
              Striped="true"
              RowClass="cursor-default"
              T="MusicResultShow"
              OnRowClick="@RowClick">
            <HeaderContent>
                <MudTh></MudTh>
                @if (IsLogin)
                {
                    <MudTh></MudTh>
                }
                <MudTh>时长</MudTh>
                <MudTh>名称</MudTh>
                <MudTh>歌手</MudTh>
                <MudTh>专辑</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>
                    @(desktopIndex++)
                </MudTd>
                @if (IsLogin)
                {
                    <MudTd>
                        <MudIconButton Size="Size.Small"
                               Icon="fa-solid fa-folder-plus"
                               OnClick="()=>AddToMyFavoriteAsync(context)" />
                    </MudTd>
                }
                <MudTd>
                    @($"{@context.Duration.Minutes:D2}:{@context.Duration.Seconds:D2}")
                </MudTd>
                <MudTd>
                    @context.Name
                </MudTd>
                <MudTd>
                    @context.Artist
                </MudTd>
                <MudTd>
                    @context.Album
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudHidden>

    var phoneIndex = 1;
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudList>
            @foreach (var row in Musics)
            {
                <MudListItem>
                    <div class="d-flex align-center"
                 @onclick="()=>PlayMusicAsync(row)">
                        <div class="flex-grow-0 seq">
                            @(phoneIndex++)
                        </div>
                        <div class="flex-grow-1 ml-5">
                            <div class="artist">
                                @row.Artist
                            </div>
                            <div class="name-album">
                                @row.Name - @row.Album
                            </div>
                        </div>
                        @if (IsLogin)
                        {
                            <MudIconButton Class="flex-grow-0 ml-5"
                               Size="Size.Small"
                               Icon="fa-solid fa-folder-plus"
                               OnClick="()=>AddToMyFavoriteAsync(row)" />
                        }

                    </div>
                </MudListItem>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudDivider />
                </MudHidden>
            }
        </MudList>
    </MudHidden>
}

@code {

    [Parameter]
    public List<MusicResultShow>? Musics { get; set; }

    private MusicResultShow _lastSelectMusic;
    private async Task AddToMyFavoriteAsync(MusicResultShow musicResult)
    {
        var music = new LocalMusic()
            {
                Id = musicResult.Id,
                IdOnPlatform = musicResult.IdOnPlatform,
                Platform = musicResult.Platform,
                Name = musicResult.Name,
                Album = musicResult.Album,
                Artist = musicResult.Artist,
                ExtendDataJson = musicResult.ExtendDataJson,
                ImageUrl = musicResult.ImageUrl
            };

        var parameters = new DialogParameters { ["Music"] = music };
        var options = new DialogOptions { ClassBackground = "dialog-backdrop" };
        var dialog = await DialogService.ShowAsync<AddToMyFavorite>("", parameters, options);
        await dialog.Result;
    }


    private void RowClick(TableRowClickEventArgs<MusicResultShow> value)
    {
        _lastSelectMusic = value.Item;
    }
    private async Task TableDoubleClick()
    {
        await PlayMusicAsync(_lastSelectMusic);
    }
    private async Task PlayMusicAsync(MusicResultShow musicResult)
    {
        await MusicResultService.PlayAsync(musicResult.ToLocalMusic());
    }
}
