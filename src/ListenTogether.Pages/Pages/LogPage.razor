@page "/log"

@using ListenTogether.Model;
@using ListenTogether.Service.Interface;

@inject ILogManage LogManage

<Loading IsLoading="_isLoading"></Loading>
<RouteAnimation>
    <div class="page d-flex flex-column">
        <div class="flex-grow-0 d-flex align-center justify-space-between">
            <MudText Typo="Typo.h6">
                日志 (仅展示200条)
            </MudText>
            <MudButton Variant="Variant.Text"
                       Class="ml-5"
                       EndIcon="fa-solid fa-trash"
                       IconSize="Size.Small"
                       Size="Size.Small"
                       OnClick="ClearLogAsync"
                       Color="Color.Primary">清空</MudButton>
        </div>

        @if (_logs == null)
        {
            <MudSkeleton Class="mt-3" Height="20px" />
            <MudSkeleton Class="mt-3" Height="20px" />
            <MudSkeleton Class="mt-3" Height="20px" />
            <MudSkeleton Class="mt-3" Height="20px" />
            <MudSkeleton Class="mt-3" Height="20px" />
            <MudSkeleton Class="mt-3" Height="20px" />
        }
        else
        {
            if (!_logs.Any())
            {
                <Empty Class="mt-2" />
            }
            else
            {
                <div class="mt-2 mb-2 flex-grow-1" style="overflow-y: auto;user-select: text;">
                    @foreach (var log in _logs)
                    {
                        <div class="log-time mt-2 cursor-text">
                            @(JiuLing.CommonLibs.Text.TimestampUtils.ConvertToDateTime(log.Timestamp))
                        </div>
                        <div class="cursor-text" style="white-space: pre-wrap;">@log.Message</div>
                    }
                </div>
            }
        }

    </div>
</RouteAnimation>
@code {
    private bool _isLoading = false;
    private List<Log>? _logs;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLogsAsync();
    }

    private async Task GetLogsAsync()
    {
        _logs = null;
        await InvokeAsync(StateHasChanged);
        _logs = await LogManage.GetAllAsync();
    }

    private async Task ClearLogAsync()
    {
        await LogManage.RemoveAllAsync();
        _logs?.Clear();
    }
}
