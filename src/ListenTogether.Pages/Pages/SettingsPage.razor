@page "/settings"
@using ListenTogether.Data.Api

@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService
@inject ILoginDataStorage LoginDataStorage
@inject IUserService UserService
@inject IEnvironmentConfigService ConfigService
@inject NavigationManager NavigationManager
@inject IAppVersion AppVersion
@inject IAutoUpgrade AutoUpgrade
@inject MusicNetPlatform _musicNetPlatform
@inject NetConfig NetConfig

<RouteAnimation>
    <div class="page">

        @if (LoginDataStorage.GetUsername().IsEmpty())
        {
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Primary"
                       OnClick="GotoLoginPage">登录/注册 ></MudButton>
        }
        else
        {
            <div class="d-flex">
                <MudAvatar Class="cursor-pointer"
                           onclick="@(GotoUserInfoEditPage)">
                    <MudImage Src="@($"{NetConfig.ApiDomain}/{LoginDataStorage.GetAvatar()}")"></MudImage>
                </MudAvatar>

                <div class="ml-3">
                    <MudText Typo="Typo.subtitle2">@LoginDataStorage.GetNickname()</MudText>
                    <MudText Typo="Typo.subtitle2">用户名：@LoginDataStorage.GetUsername()</MudText>
                </div>
            </div>
        }

        <div>
            <div class="mt-8 mb-2 type-title">常规</div>
            <Switch Title="启动时检查更新"
                    Checked="@(Settings.Environment.General.IsAutoCheckUpdate)"
                    OnChanged="OnIsAutoCheckUpdateChange" />
            <Switch Title="关闭时最小化"
                    Checked="@(Settings.Environment.General.IsHideWindowWhenClosed)"
                    OnChanged="OnIsHideWindowWhenClosedChange" />
            <div class="d-flex justify-space-between align-center">
                <div>外观</div>
                <div style="width:100px;">
                    <MudSelect T="int"
                               Label=""
                               Margin="Margin.Dense"
                               Dense="true"
                               SelectedValues="@(new List<int>(){Settings.Environment.General.AppThemeInt})"
                               SelectedValuesChanged="@((x)=>OnAppThemeIntChange(x.First()))"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">跟随系统</MudSelectItem>
                        <MudSelectItem Value="1">浅色</MudSelectItem>
                        <MudSelectItem Value="2">深色</MudSelectItem>
                    </MudSelect>
                </div>
            </div>
        </div>

        <div>
            <div class="mt-8 mb-2 type-title">搜索</div>
            <Switch Title="网易云音乐"
                    Checked="@(CheckEnablePlatform(PlatformEnum.NetEase))"
                    OnChanged="@((x)=>EnablePlatformAsync( PlatformEnum.NetEase,x ))" />
            <Switch Title="酷我音乐"
                    Checked="@(CheckEnablePlatform(PlatformEnum.KuWo))"
                    OnChanged="@((x)=>EnablePlatformAsync( PlatformEnum.KuWo,x ))" />
            <Switch Title="酷狗音乐"
                    Checked="@(CheckEnablePlatform(PlatformEnum.KuGou))"
                    OnChanged="@((x)=>EnablePlatformAsync( PlatformEnum.KuGou,x ))" />
            <Switch Title="咪咕音乐"
                    Checked="@(CheckEnablePlatform(PlatformEnum.MiGu))"
                    OnChanged="@((x)=>EnablePlatformAsync( PlatformEnum.MiGu,x ))" />
            <Switch Title="隐藏小于1分钟的歌曲"
                    Checked="@(Settings.Environment.Search.IsHideShortMusic)"
                    OnChanged="OnIsHideShortMusicChanged" />
            <Switch Title="歌曲名或歌手名必须包含搜索词"
                    Checked="@(Settings.Environment.Search.IsMatchSearchKey)"
                    OnChanged="OnIsMatchSearchKeyChanged" />
        </div>

        <div>
            <div class="mt-8 mb-2 type-title">播放</div>
            <Switch Title="仅在WIFI下播放未缓存的歌曲"
                    Checked="@(Settings.Environment.Play.IsWifiPlayOnly)"
                    OnChanged="OnIsWifiPlayOnlyChanged" />
            <Switch Title="播放页面屏幕常亮"
                    Checked="@(Settings.Environment.Play.IsPlayingPageKeepScreenOn)"
                    OnChanged="OnIsPlayingPageKeepScreenOnChanged" />
            <Switch Title="播放歌单前清空播放列表"
                    Checked="@(Settings.Environment.Play.IsCleanPlaylistWhenPlaySongMenu)"
                    OnChanged="OnIsCleanPlaylistWhenPlaySongMenuChanged" />
        </div>

        <MudButton Color="Color.Primary"
                   Class="mt-8"
                   Variant="Variant.Filled"
                   Style="width:100%"
                   OnClick="GotoLogPage">日志管理</MudButton>
        <MudButton Color="Color.Primary"
                   Class="mt-2"
                   Variant="Variant.Filled"
                   Style="width:100%"
                   OnClick="GotoCachePage">缓存管理</MudButton>
        @if (LoginDataStorage.GetUsername().IsNotEmpty())
        {
            <MudButton Color="Color.Primary"
                       Class="mt-2"
                       Variant="Variant.Filled"
                       Style="width:100%"
                       OnClick="@(async () => await LogoutAsync())">退出账号</MudButton>
        }

        <div class="d-flex flex-column align-center mt-5">
            <div class="app-title">一起听</div>
            <div class="mt-3 app-text">@($"版本: {Version}")</div>
            <div class="mt-1 app-link" @onclick="CheckUpdateAsync">检查更新</div>
            <div class="mt-1 app-text">本软件基于GPL-3.0协议，开源、免费</div>
            <div class="mt-1 app-link">
                <a href="https://github.com/JiuLing-zhang/ListenTogether"
                   target="blank">
                    Github
                </a>
            </div>
        </div>
    </div>
</RouteAnimation>

@code {
    public string Version { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Version = await AppVersion.GetCurrentVersionStringAsync();
    }

    private async Task OnIsAutoCheckUpdateChange(bool value)
    {
        Settings.Environment.General.IsAutoCheckUpdate = value;
        await WriteGeneralConfigAsync();
    }
    private async Task OnIsHideWindowWhenClosedChange(bool value)
    {
        Settings.Environment.General.IsHideWindowWhenClosed = value;
        await WriteGeneralConfigAsync();
    }

    private async Task OnAppThemeIntChange(int value)
    {
        Settings.Environment.General.AppThemeInt = value;
        await WriteGeneralConfigAsync();
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    /// <summary>
    /// 保存通用配置
    /// </summary>
    private async Task WriteGeneralConfigAsync()
    {
        await ConfigService.WriteGeneralSettingAsync(Settings.Environment.General);
    }

    private static bool CheckEnablePlatform(PlatformEnum platform)
    {
        if ((Settings.Environment.Search.EnablePlatform & platform) == platform)
        {
            return true;
        }

        return false;
    }

    private async Task EnablePlatformAsync(PlatformEnum platform, bool isEnable)
    {
        if (isEnable)
        {
            if (!CheckEnablePlatform(platform))
            {
                Settings.Environment.Search.EnablePlatform = Settings.Environment.Search.EnablePlatform | platform;
            }
        }
        else
        {
            if (CheckEnablePlatform(platform))
            {
                Settings.Environment.Search.EnablePlatform = Settings.Environment.Search.EnablePlatform & ~platform;
            }
        }
        await WriteSearchConfigAsync();
    }
    private async Task OnIsHideShortMusicChanged(bool value)
    {
        Settings.Environment.Search.IsHideShortMusic = value;
        await WriteSearchConfigAsync();
    }
    private async Task OnIsMatchSearchKeyChanged(bool value)
    {
        Settings.Environment.Search.IsMatchSearchKey = value;
        await WriteSearchConfigAsync();
    }
    private async Task WriteSearchConfigAsync()
    {
        await ConfigService.WriteSearchSettingAsync(Settings.Environment.Search);
    }

    private async Task OnIsWifiPlayOnlyChanged(bool value)
    {
        Settings.Environment.Play.IsWifiPlayOnly = value;
        await WritePlayConfigAsync();
    }
    private async Task OnIsPlayingPageKeepScreenOnChanged(bool value)
    {
        Settings.Environment.Play.IsPlayingPageKeepScreenOn = value;
        await WritePlayConfigAsync();
    }
    private async Task OnIsCleanPlaylistWhenPlaySongMenuChanged(bool value)
    {
        Settings.Environment.Play.IsCleanPlaylistWhenPlaySongMenu = value;
        await WritePlayConfigAsync();
    }

    /// <summary>
    /// 保存播放配置
    /// </summary>
    private async Task WritePlayConfigAsync()
    {
        await ConfigService.WritePlaySettingAsync(Settings.Environment.Play);
    }
    private void GotoUserInfoEditPage()
    {
        NavigationManager.NavigateTo("/user-info-edit");
    }
    private void GotoLoginPage()
    {
        NavigationManager.NavigateTo("/login");
    }
    private void GotoLogPage()
    {
        NavigationManager.NavigateTo("/log");
    }
    private void GotoCachePage()
    {
        NavigationManager.NavigateTo("/cache");
    }

    private async Task LogoutAsync()
    {
        bool? result = await DialogService.ShowMessageBox("", "确定要退出吗？", "确定", "取消");
        if (!result.HasValue || result.Value == false)
        {
            return;
        }
        await UserService.LogoutAsync();
        LoginDataStorage.Clear();
    }

    private async Task CheckUpdateAsync()
    {
        await AutoUpgrade.DoAsync(false);
    }
}
