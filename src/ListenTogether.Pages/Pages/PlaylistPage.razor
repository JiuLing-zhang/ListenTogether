@page "/playlist"
@inherits MyComponentBase

@using ListenTogether.Filters.MusicSearchFilter;

@inject MusicPlayerService MusicPlayerService
@inject MusicResultService MusicResultService
@inject IDialogService DialogService
@inject IPlaylistService PlaylistService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<Loading IsLoading="_isLoading"></Loading>
<RouteAnimation>
    <div class="header">
        <div>
            <MudText Typo="Typo.h6">播放列表</MudText>
        </div>
        @if (_playlist != null && _playlist.Any())
        {
            <MudButton Variant="Variant.Text"
                       Class="ml-5"
                       EndIcon="fa-solid fa-trash"
                       IconSize="Size.Small"
                       Size="Size.Small"
                       OnClick="@(()=>ClearAsync())"
                       Color="Color.Primary">清空</MudButton>
        }
    </div>

    @if (_playlist == null)
    {
        <MudSkeleton Class="mt-1" Height="40px" />
        <MudSkeleton Class="mt-1" Height="40px" />
        <MudSkeleton Class="mt-1" Height="40px" />
        <MudSkeleton Class="mt-1" Height="40px" />
    }
    else
    {
        @if (!_playlist.Any())
        {
            <Empty OnRefresh="GetPlaylistAsync" />
        }
        else
        {
            <MudList Clickable="true">
                @foreach (var playlistItem in _playlist)
                {
                    <MudListItem Style="cursor:default">
                        <div class="d-flex align-center playlist-detail">
                            <div class="flex-grow-0 tool">
                                @if (IsLogin)
                                {
                                    <MudIconButton Size="Size.Small"
                                                   Icon="fa-solid fa-folder-plus"
                                                   OnClick="@(()=>AddToMyFavoriteAsync(playlistItem))" />
                                }
                                <MudIconButton Icon="fa-solid fa-trash"
                                               Class="ml-2"
                                               Size="Size.Small"
                                               OnClick="@(()=>DeleteAsync(playlistItem.Id))" />
                            </div>

                            <MouseDiv Class="d-flex align-center flex-grow-1 music-info" OnClick="@(()=>Play(playlistItem))">
                                <div class="music-name">
                                    @playlistItem.Name
                                </div>
                                <div class="music-artist">
                                    @($" - {playlistItem.Artist}")
                                </div>
                            </MouseDiv>
                        </div>
                    </MudListItem>
                    <MudHidden Breakpoint="Breakpoint.MdAndUp">
                        <MudDivider />
                    </MudHidden>
                }
            </MudList>
        }
    }
</RouteAnimation>
@code {

    private bool _isLoading = false;

    private List<MusicResultShow>? _playlist;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetPlaylistAsync();
    }

    private async Task GetPlaylistAsync()
    {
        _playlist = null;
        var playlist = await PlaylistService.GetAllAsync();
        _playlist = new List<MusicResultShow>();
        foreach (var item in playlist)
        {
            _playlist.Add(new MusicResultShow()
                {
                    Platform = item.Platform,
                    Id = item.Id,
                    Name = item.Name,
                    Artist = item.Artist,
                    Album = item.Album,
                });
        }
    }

    private async Task ClearAsync()
    {
        bool? result = await DialogService.ShowMessageBox("", "确定要删除播放列表吗？", yesText: "确定", cancelText: "取消");
        if (result == null || result.Value == false)
        {
            return;
        }

        _isLoading = true;

        if (MusicPlayerService.IsPlaying)
        {
            await MusicPlayerService.PlayAsync(MusicPlayerService.Metadata.Id);
        }

        var isRemove = await PlaylistService.RemoveAllAsync();
        _isLoading = false;
        if (isRemove == false)
        {
            Snackbar.Add("删除失败", Severity.Error);
            return;
        }


        Snackbar.Add("删除成功", Severity.Success);
        _playlist?.Clear();
    }

    private async Task DeleteAsync(string musicId)
    {
        _isLoading = true;

        if (MusicPlayerService.IsPlaying)
        {
            if (_playlist.Count == 1)
            {
                //播放列表仅剩当前歌曲时，直接暂停播放
                await MusicPlayerService.PlayAsync(MusicPlayerService.Metadata.Id);
            }
            else if (MusicPlayerService.Metadata.Id == musicId)
            {
                await MusicPlayerService.Next();
            }
        }
        var isDeleted = await PlaylistService.RemoveAsync(musicId);
        _isLoading = false;
        if (!isDeleted)
        {
            Snackbar.Add("删除失败", Severity.Error);
            return;
        };
        _playlist?.RemoveAll(x => x.Id == musicId);
        Snackbar.Add("删除成功", Severity.Success);
    }

    private async Task AddToMyFavoriteAsync(MusicResultShow musicResult)
    {
        var music = new LocalMusic()
            {
                Id = musicResult.Id,
                IdOnPlatform = musicResult.IdOnPlatform,
                Platform = musicResult.Platform,
                Name = musicResult.Name,
                Album = musicResult.Album,
                Artist = musicResult.Artist,
                ExtendDataJson = musicResult.ExtendDataJson,
                ImageUrl = musicResult.ImageUrl
            };

        var parameters = new DialogParameters { ["Music"] = music };
        var options = new DialogOptions { ClassBackground = "dialog-backdrop" };
        var dialog = await DialogService.ShowAsync<AddToMyFavorite>("", parameters, options);
        await dialog.Result;
    }

    private async Task Play(MusicResultShow music)
    {
        await MusicResultService.PlayAsync(music.ToLocalMusic());
    }
}
