@page "/cache"
@inject IDialogService DialogService
@inject IMusicCacheStorage MusicCacheStorage

<RouteAnimation>
    <div class="page">

        @if (_cacheLength == null)
        {
            <div class="d-flex flex-column align-center mt-5">
                <MudSkeleton SkeletonType="SkeletonType.Circle" Width="200px" Height="200px" />
                <div class="d-flex align-center mt-5">
                    <MudProgressCircular Size="Size.Small"
                                         Indeterminate="true" />
                    <MudText Typo="Typo.caption"
                             Class="ml-2">
                        正在计算
                    </MudText>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-column align-center mt-5">
                <div class="cache-size d-flex flex-column align-center justify-center">
                    <MudText Typo="Typo.subtitle2">
                        缓存大小
                    </MudText>
                    <MudText Typo="Typo.h6">
                        @($"{_cacheLength / 1024 / 1024:N2}")
                    </MudText>
                    <MudText Typo="Typo.subtitle2">
                        MB
                    </MudText>
                </div>
                <MudText Typo="Typo.caption" Class="mt-2">
                    @_processMessage
                </MudText>
                <MudButton Variant="Variant.Outlined"
                           Class="mt-7"
                           Size="Size.Small"
                           Disabled="@(_isWorking || _cacheLength==0)"
                           OnClick="ClearCacheAsync">全部清理</MudButton>
            </div>
        }

    </div>
</RouteAnimation>
@code {
    private double? _cacheLength;
    private bool _isWorking = false;
    private string _processMessage = "";
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CalcCacheAsync();
    }

    private async Task CalcCacheAsync()
    {
        _isWorking = true;
        _cacheLength = null;
        _processMessage = "正在计算...";
        await Task.Run(async () =>
        {
            _cacheLength = 0;
            await MusicCacheStorage.CalcCacheSizeAsync(async (length) =>
            {
                _cacheLength += length;
                await InvokeAsync(StateHasChanged);
            });
            _processMessage = "计算完成";
            _isWorking = false;
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task ClearCacheAsync()
    {
        bool? result = await DialogService.ShowMessageBox("", "确定要删除吗？删除后不可恢复。", yesText: "确定", cancelText: "取消");
        if (result == null || result.Value == false)
        {
            return;
        }
        _isWorking = true;
        _processMessage = "正在清理....";

        await Task.Run(async () =>
        {
            await MusicCacheStorage.ClearCacheAsync(async (length) =>
            {
                _cacheLength -= length;
                await InvokeAsync(StateHasChanged);
            });

            _processMessage = "缓存已全部清理";
            _isWorking = false;
            await InvokeAsync(StateHasChanged);
        });
    }
}
