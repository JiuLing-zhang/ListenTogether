@page "/discover"
@using ListenTogether.Data.Api
@inherits MyComponentBase

@inject NavigationManager NavigationManager
@inject ISearchHistoryStorage SearchHistoryStorage
@inject IKeyValueStorage KeyValueStorage
@inject IMusicNetworkService _musicNetworkService

<MudHidden Breakpoint="Breakpoint.SmAndUp">
    <SearchLabel />
</MudHidden>

@if (PlatformId != null)
{
    <div class="tab-container">
        <div class="tab-item @(_platform== PlatformEnum.MiGu?"active":"")"
             onclick="@(()=>PlatformSelected((int)PlatformEnum.MiGu))">
            @(PlatformEnum.MiGu.GetDescription())
        </div>
        <div class="tab-item @(_platform== PlatformEnum.KuWo?"active":"")"
             onclick="@(()=>PlatformSelected((int)PlatformEnum.KuWo))">
            @(PlatformEnum.KuWo.GetDescription())
        </div>
        <div class="tab-item @(_platform== PlatformEnum.NetEase?"active":"")"
             onclick="@(()=>PlatformSelected((int)PlatformEnum.NetEase))">
            @(PlatformEnum.NetEase.GetDescription())
        </div>
    </div>

    <div class="mt-4">
        <Tags Platform="@(_platform)"
              ActiveTagId="@(TagId)"
              OnTagSelect="@((id)=>TagSelected(id))" />
    </div>
    <div class="mt-4">
        <Discover Platform="@(_platform)"
                  ActiveTagId="@(TagId)" />
    </div>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PlatformId { get; set; }
    private PlatformEnum _platform => (PlatformEnum)PlatformId.Value;

    [Parameter]
    [SupplyParameterFromQuery]
    public string TagId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (PlatformId == null)
        {
            PlatformId = await KeyValueStorage.Get("DiscoverPlatform", (int)PlatformEnum.MiGu);
        }
        if (TagId.IsEmpty())
        {
            TagId = await KeyValueStorage.Get("DiscoverTagId", "榜单");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await KeyValueStorage.Set("DiscoverPlatform", PlatformId.Value);
        await KeyValueStorage.Set("DiscoverTagId", TagId);
    }

    private void PlatformSelected(int platformId)
    {
        ReloadPageByQueryParameters(platformId, "榜单");
    }
    private void TagSelected(string tagId)
    {
        ReloadPageByQueryParameters((int)_platform, tagId);
    }
    private void ReloadPageByQueryParameters(int platformKey, string tagId)
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(
        new Dictionary<string, object?>
            {
                ["PlatformId"] = platformKey,
                ["TagId"] = tagId,
            }));
    }
    private void GotoSearchPage()
    {
        NavigationManager.NavigateTo("/search");
    }

}
