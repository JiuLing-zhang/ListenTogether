@inject AutoCloseJob AutoCloseJob

@implements IDisposable
<MudDialog>
    <DialogContent>
        <div class="page">
            <Switch Title="@($"定时关闭 {_remainingTimeString}")"
                    Checked="@(AutoCloseJob.IsRunning)"
                    OnChanged="@(SetAutoClose)" />

            <div class="mt-4">
                <div>时间（分钟）</div>
                <MudRadioGroup Class="mt-2"
                               SelectedOption="@(_minute)"
                               SelectedOptionChanged="MinuteChanged"
                               T="int">
                    <MudGrid>
                        <MudItem xs="12" md="2">
                            <MudRadio Dense="true"
                                      Option="@(10)">10</MudRadio>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudRadio Dense="true"
                                      Option="@(20)">20</MudRadio>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudRadio Dense="true"
                                      Option="@(30)">30</MudRadio>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudRadio Dense="true"
                                      Option="@(45)">45</MudRadio>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudRadio Dense="true"
                                      Option="@(60)">60</MudRadio>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudRadio Dense="true"
                                      Option="@(90)">90</MudRadio>
                        </MudItem>
                    </MudGrid>
                </MudRadioGroup>

                <div class="mt-3">自定义</div>
                <div class="d-flex justify-space-between align-center">
                    <MudTextField T="int" @bind-Value="_customMinute" />
                    <MudButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="SetCustomMinute"
                               Disabled="@(_customMinute<=0)"
                               Immediate="true"
                               IconColor="Color.Primary">确定</MudButton>
                </div>
            </div>
        </div>
    </DialogContent>
</MudDialog>

@code {
    private int _minute;
    private int _customMinute;
    private string _remainingTimeString = "";
    private Timer? _timer;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _timer = new Timer(CalcRemainingTime, new AutoResetEvent(false), 0, 1000);
    }
    private void CalcRemainingTime(object? value)
    {
        var ts = AutoCloseJob.GetRemainingTime();
        if (ts.TotalSeconds <= 0)
        {
            if (_remainingTimeString.IsEmpty())
            {
                return;
            }
            _remainingTimeString = "";
            InvokeAsync(StateHasChanged);
            return;
        }
        _remainingTimeString = $"{(ts.Hours * 60 + ts.Minutes):D2}:{ts.Seconds:D2}";
        InvokeAsync(StateHasChanged);
    }

    private void SetAutoClose(bool value)
    {
        if (value)
        {
            _minute = 10;
            _customMinute = 0;
            AutoCloseJob.Start(_minute);
        }
        else
        {
            _minute = 0;
            _customMinute = 0;
            AutoCloseJob.Stop();
        }
    }

    private void MinuteChanged(int value)
    {
        _minute = value;
        if (_minute == 0)
        {
            return;
        }
        AutoCloseJob.Start(_minute);
    }

    private void SetCustomMinute()
    {
        _minute = 0;
        AutoCloseJob.Start(_customMinute);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
