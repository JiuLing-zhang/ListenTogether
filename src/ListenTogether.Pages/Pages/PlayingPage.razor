@using ListenTogether.EasyLog
@inject MusicPlayerService _playerService
@inject IPlaylistService _playlistService
@inject IMusicNetworkService _musicNetworkService

<div class="page d-flex flex-column">
    <div class="flex-grow-1 d-flex flex-column music-content">
        <div class="flex-grow-0 d-flex align-center justify-space-between tool-bar">
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown"
                           Size="Size.Medium"
                           Style="color:#FFF"
                           OnClick="@(()=>ClosePlayingPage())"></MudIconButton>

            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <DesktopTitleBar ButtonStyle="color:#FFF" />
            </MudHidden>
        </div>

        <div class="flex-grow-1 music-info">
            <div class="music-image">
                <div class="music-image-avatar @(_isPlaying ? "" : "animation-paused")">
                    @if (_currentMusic == null)
                    {
                        <MudSkeleton Class="mt-1" Height="200" />
                    }
                    else
                    {
                        <MudAvatar Style="width: 200px; height: 200px;">
                            <MudImage Src="@(_currentMusic.ImageUrl)"
                                  Elevation="25" />
                        </MudAvatar>
                    }

                </div>
                <div class="align-self-center mt-4 copy">
                    复制
                </div>
            </div>
            <div class="music-detail d-flex flex-column">
                @if (_currentMusic == null)
                {
                    <div class="flex-grow-0">
                        <MudSkeleton Class="mt-1" />
                    </div>
                }
                else
                {
                    <div class="flex-grow-0 title">
                        @_currentMusic.Name
                    </div>
                    <div class="flex-grow-0 name">
                        @_currentMusic.Artist - @_currentMusic.Album
                    </div>
                }

                <div class="flex-grow-1 lyric">
                    @if (_lyrics == null)
                    {
                        <MudSkeleton Class="mt-1" />
                        <MudSkeleton Class="mt-1" />
                        <MudSkeleton Class="mt-1" />
                        <MudSkeleton Class="mt-1" />
                    }
                    else
                    {
                        <ul style="transform:translateY(@(0-_offset)px)">

                            @foreach (var lyric in _lyrics)
                            {
                                <li class="lyric-row @(lyric.IsHighlight?"highlight":"")">@lyric.Info</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>

        <div class="blurBgMask"></div>
        <div class="blur" style="background-image:url(@(_currentMusic?.ImageUrl??"https://jiuling.cc/images/music.svg"))"></div>
    </div>

    <div class="playing-player-bar">
        <PlayerBar />
    </div>
</div>

@code {

    private int _offset = 0;
    private bool _isPlaying = false;
    [Parameter]
    public EventCallback OnClosePlayingPage { get; set; }
    private Timer? _timer;
    private MusicResultShow? _currentMusic;
    private List<Lyric>? _lyrics;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //TODO 锁屏
        //if (!Config.Desktop && GlobalConfig.MyUserSetting.Play.IsPlayingPageKeepScreenOn)
        //{
        //    DeviceDisplay.Current.KeepScreenOn = true;
        //}

        _playerService.NewMusicAdded += async (_, __) => await NewMusicAddedAsync();
        _playerService.IsPlayingChanged += (_, __) =>
        {
            _isPlaying = _playerService.IsPlaying;
            StateHasChanged();
        };

        _timer = new Timer(ScrollLyric, new AutoResetEvent(false), 0, 200);


        _isPlaying = _playerService.IsPlaying;
        await NewMusicAddedAsync();
    }

    private void ScrollLyric(object? value)
    {
        if (!_isPlaying || _lyrics == null || !_lyrics.Any())
        {
            return;
        }

        var offset = 0;
        var positionMillisecond = _playerService.CurrentPosition.position.TotalMilliseconds;
        for (int i = 0; i < _lyrics.Count(); i++)
        {
            _lyrics[i].IsHighlight = false;
            offset++;

            if (_lyrics[i].PositionMillisecond > positionMillisecond)
            {
                var highlightIndex = i - 1;
                if (highlightIndex < 0)
                {
                    highlightIndex = 0;
                }
                _lyrics[highlightIndex].IsHighlight = true;
                break;
            }
        }

        offset = offset * 34;
        offset = offset - 200;
        if (offset < 0)
        {
            offset = 0;
        }
        _offset = offset;

        InvokeAsync(StateHasChanged);
    }

    private async Task NewMusicAddedAsync()
    {
        if (_playerService.Metadata == null)
        {
            return;
        }
        var playlist = await _playlistService.GetOneAsync(_playerService.Metadata.Id);
        if (playlist == null)
        {
            return;
        }
        _offset = 0;
        _currentMusic = new MusicResultShow()
            {
                Id = playlist.Id,
                IdOnPlatform = playlist.IdOnPlatform,
                Platform = playlist.Platform,
                Name = playlist.Name,
                Artist = playlist.Artist,
                Album = playlist.Album,
                ImageUrl = playlist.ImageUrl,
                ExtendDataJson = playlist.ExtendDataJson,
            };
        await GetLyricDetailAsync();
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// 解析歌词
    /// </summary>
    private async Task GetLyricDetailAsync()
    {

        if (_currentMusic == null)
        {
            return;
        }
        string lyric = await GetLyric();
        if (lyric.IsEmpty())
        {
            return;
        }

        _lyrics = new List<Lyric>();
        string pattern = ".*";
        var lyricRowList = JiuLing.CommonLibs.Text.RegexUtils.GetAll(lyric, pattern);
        foreach (var lyricRow in lyricRowList)
        {
            if (lyricRow.IsEmpty())
            {
                continue;
            }
            pattern = @"\[(?<mm>\d*):(?<ss>\d*).(?<fff>\d*)\](?<lyric>.*)";
            var (success, result) = JiuLing.CommonLibs.Text.RegexUtils.GetMultiGroupInFirstMatch(lyricRow, pattern);
            if (success == false)
            {
                continue;
            }

            int totalMillisecond = Convert.ToInt32(result["mm"]) * 60 * 1000 + Convert.ToInt32(result["ss"]) * 1000 + Convert.ToInt32(result["fff"]);
            var info = result["lyric"];
            _lyrics.Add(new Lyric(totalMillisecond, info));
        }
    }

    private async Task<string> GetLyric()
    {
        if (_currentMusic == null)
        {
            return "";
        }
        return await _musicNetworkService.GetLyricAsync(_currentMusic.Platform, _currentMusic.IdOnPlatform, _currentMusic.ExtendDataJson);
    }
    private async Task ClosePlayingPage()
    {
        await OnClosePlayingPage.InvokeAsync();
    }
}
