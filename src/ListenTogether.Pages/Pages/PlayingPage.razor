@page "/playing"
@layout EmptyLayout

@using ListenTogether.EasyLog
@inject MusicPlayerService _playerService
@inject IPlaylistService _playlistService
@inject IMusicNetworkService _musicNetworkService
@inject IJSRuntime JSRuntime
@inject IMusicShare MusicShare
@inject IDeviceScreen DeviceScreen

@implements IDisposable

<RouteAnimation>
    <div class="blurBgMask"></div>
    <div class="blur" style="background-image:url(@(_currentMusic?.ImageUrl??"https://jiuling.cc/images/music.svg"))"></div>

    <div class="page music-page">

        <div class="tool-bar d-flex align-center">
            <MudIconButton Class="flex-grow-0"
                           Icon="@Icons.Material.Filled.KeyboardArrowDown"
                           Size="Size.Medium"
                           Style="color:var(--mud-palette-white);"
                           OnClick="@(()=>ClosePlayingPage())"></MudIconButton>

            <div class="flex-grow-1 d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Share"
                               Size="Size.Small"
                               Style="color:var(--mud-palette-white);"
                               OnClick="@(ShareAsync)"></MudIconButton>
            </div>

            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <DesktopTitleBar Class="flex-grow-0 ml-5"
                                 ButtonStyle="color:var(--mud-palette-white);" />
            </MudHidden>
        </div>

        <div class="music-image">
            <div class="music-image-avatar @(_isPlaying ? "" : "animation-paused")">
                @if (_currentMusic == null)
                {
                    <MudSkeleton Class="mt-1" Height="200" />
                }
                else
                {
                    <img class="music-img mud-elevation-25"
                         src="@(_currentMusic.ImageUrl)" />
                }
            </div>
        </div>

        <div class="music-detail d-flex flex-column align-center">
            @if (_currentMusic == null)
            {
                <MudSkeleton Class="mt-1" />
            }
            else
            {
                <div class="title">
                    <div class="name">
                        @_currentMusic.Name
                    </div>
                </div>
                <div class="artist-album d-flex align-center">
                    <div class="artist">
                        @_currentMusic.Artist
                    </div>
                    <div class="album">
                        @($" - {_currentMusic?.Album}")
                    </div>
                </div>
            }

            <div class="lyric">
                @if (_lyrics == null)
                {
                    <MudSkeleton Class="mt-1" />
                    <MudSkeleton Class="mt-1" />
                    <MudSkeleton Class="mt-1" />
                    <MudSkeleton Class="mt-1" />
                }
                else
                {
                    <ul style="width:100%;transform:translateY(@(0-_offset)px)">

                        @foreach (var lyric in _lyrics)
                        {
                            <li class="lyric-row @(lyric.IsHighlight?"highlight":"")">@lyric.Info</li>
                        }
                    </ul>
                }
            </div>
        </div>

        <div class="player-bar">
            <PlayerBar />
        </div>
    </div>
</RouteAnimation>
@code {

    private int _offset = 0;
    private bool _isPlaying = false;
    private Timer? _timer;
    private MusicResultShow? _currentMusic;
    private List<Lyric>? _lyrics;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Settings.Environment.Play.IsPlayingPageKeepScreenOn)
        {
            DeviceScreen.ScreenOn();
        }
        _playerService.NewMusicAdded += NewMusicAddedDoAsync;
        _playerService.IsPlayingChanged += IsPlayingChangedDoAsync;

        _timer = new Timer(ScrollLyric, new AutoResetEvent(false), 0, 200);

        await IsPlayingChangedAsync();
        await NewMusicAddedAsync();
    }

    private async void ScrollLyric(object? value)
    {
        if (!_isPlaying || _lyrics == null || !_lyrics.Any())
        {
            return;
        }

        var lyricHeight = await JSRuntime.InvokeAsync<int>("GetElementHeightFromClass", "lyric");
        var lyricRowHeight = await JSRuntime.InvokeAsync<int>("GetElementHeightFromClass", "lyric-row");
        if (lyricHeight == 0 || lyricRowHeight == 0)
        {
            return;
        }

        var offset = 0;
        var isHighlightSetted = false;
        var positionMillisecond = _playerService.CurrentPosition.position.TotalMilliseconds;
        for (int i = 0; i < _lyrics.Count(); i++)
        {
            //防止拖动滚动条到之前的位置时没有清除高亮
            _lyrics[i].IsHighlight = false;
            if (isHighlightSetted)
            {
                continue;
            }
            offset++;

            if (_lyrics[i].PositionMillisecond > positionMillisecond)
            {
                var highlightIndex = i - 1;
                if (highlightIndex < 0)
                {
                    highlightIndex = 0;
                }
                _lyrics[highlightIndex].IsHighlight = true;
                isHighlightSetted = true;
            }
        }

        offset = offset * lyricRowHeight;
        offset = offset - lyricHeight / 2 - lyricRowHeight;
        if (offset < 0)
        {
            offset = 0;
        }
        _offset = offset;

        await InvokeAsync(StateHasChanged);
    }

    private async void NewMusicAddedDoAsync(object? sender, EventArgs e)
    {
        await NewMusicAddedAsync();
    }
    private async void IsPlayingChangedDoAsync(object? sender, EventArgs e)
    {
        await IsPlayingChangedAsync();
    }

    private async Task NewMusicAddedAsync()
    {
        if (_playerService.Metadata == null)
        {
            return;
        }
        var playlist = await _playlistService.GetOneAsync(_playerService.Metadata.Id);
        if (playlist == null)
        {
            return;
        }
        _offset = 0;
        _currentMusic = new MusicResultShow()
            {
                Id = playlist.Id,
                IdOnPlatform = playlist.IdOnPlatform,
                Platform = playlist.Platform,
                Name = playlist.Name,
                Artist = playlist.Artist,
                Album = playlist.Album,
                ImageUrl = playlist.ImageUrl,
                ExtendDataJson = playlist.ExtendDataJson,
            };
        await GetLyricDetailAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task IsPlayingChangedAsync()
    {
        _isPlaying = _playerService.IsPlaying;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// 解析歌词
    /// </summary>
    private async Task GetLyricDetailAsync()
    {

        if (_currentMusic == null)
        {
            return;
        }
        string lyric = await GetLyric();
        if (lyric.IsEmpty())
        {
            return;
        }

        _lyrics = new List<Lyric>();
        string pattern = ".*";
        var lyricRowList = JiuLing.CommonLibs.Text.RegexUtils.GetAll(lyric, pattern);
        foreach (var lyricRow in lyricRowList)
        {
            if (lyricRow.IsEmpty())
            {
                continue;
            }
            pattern = @"\[(?<mm>\d*):(?<ss>\d*).(?<fff>\d*)\](?<lyric>.*)";
            var (success, result) = JiuLing.CommonLibs.Text.RegexUtils.GetMultiGroupInFirstMatch(lyricRow, pattern);
            if (success == false)
            {
                continue;
            }

            int totalMillisecond = Convert.ToInt32(result["mm"]) * 60 * 1000 + Convert.ToInt32(result["ss"]) * 1000 + Convert.ToInt32(result["fff"]);
            var info = result["lyric"];
            _lyrics.Add(new Lyric(totalMillisecond, info));
        }
    }

    private async Task<string> GetLyric()
    {
        if (_currentMusic == null)
        {
            return "";
        }
        return await _musicNetworkService.GetLyricAsync(_currentMusic.Platform, _currentMusic.IdOnPlatform, _currentMusic.ExtendDataJson);
    }
    private async Task ClosePlayingPage()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async Task ShareAsync()
    {
        if (_currentMusic == null)
        {
            return;
        }
        string musicUrl = await _musicNetworkService.GetPlayPageUrlAsync(_currentMusic.Platform, _currentMusic.IdOnPlatform);
        await MusicShare.ShareLinkAsync(musicUrl, $"{_currentMusic.Name} - {_currentMusic.Artist}");
    }

    public void Dispose()
    {
        _timer?.Dispose();
        _playerService.NewMusicAdded -= NewMusicAddedDoAsync;
        _playerService.IsPlayingChanged -= IsPlayingChangedDoAsync;
        DeviceScreen.ScreenOff();
    }
}
