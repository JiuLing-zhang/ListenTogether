@page "/user-info-edit"
@using ListenTogether.Data;

@inherits MyComponentBase

@inject NavigationManager NavigationManager
@inject NetConfig NetConfig
@inject ILoginDataStorage LoginDataStorage
@inject IDialogService DialogService
@inject IUserService UserService

<Loading IsLoading="_isLoading"></Loading>
<RouteAnimation>
    <div class="page">
        <MudGrid Class="ma-5">
            <MudItem xs="12" md="12">
                <MudPaper Class="pa-4" Elevation="0">
                    <div class="d-flex mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary"></MudIcon>
                        <MudText Class="ml-1">编辑资料</MudText>
                    </div>

                    <div class="d-flex justify-space-between align-center my-3 px-3">
                        <div>头像</div>
                        <MudFileUpload T="IBrowserFile"
                                       OnFilesChanged="UploadFiles"
                                       Hidden="false"
                                       Accept=".png, .jpg"
                                       InputStyle="position: absolute;overflow: hidden;height: 40px;width: 40px;z-index: 20;opacity:0;cursor: pointer;">
                            <ButtonTemplate>
                                <MudAvatar>
                                    <MudImage Src="@($"{NetConfig.ApiDomain}/{LoginDataStorage.GetAvatar()}")"></MudImage>
                                </MudAvatar>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </div>
                    <MudDivider />
                    <div class="d-flex justify-space-between align-center my-3 px-3">
                        <div>用户名</div>
                        <MudButton Variant="Variant.Text"
                                   OnClick="EditUsernameAsync"
                                   Style="text-transform: none;">
                            @LoginDataStorage.GetUsername()
                        </MudButton>
                    </div>
                    <MudDivider />
                    <div class="d-flex justify-space-between align-center my-3 px-3">
                        <div>昵称</div>
                        <MudButton Variant="Variant.Text"
                                   OnClick="EditNicknameAsync"
                                   Style="text-transform: none;">
                            @LoginDataStorage.GetNickname()
                        </MudButton>
                    </div>
                    <MudDivider />
                </MudPaper>
            </MudItem>
        </MudGrid>
    </div>
</RouteAnimation>
@code {

    private bool _isLoading = false;
    private int _maxFileLength = 500 * 1024;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (IsNotLogin)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (e.GetMultipleFiles()[0].Size >= _maxFileLength)
        {
            DialogService.Show<Dialog>("", DialogBuilder.DialogParameters("图片大小不能超过 500 KB"));
            return;
        }
        var avatar = new UserAvatar()
            {
                FileName = e.File.Name
            };
        var stream = e.File.OpenReadStream(_maxFileLength);
        using (MemoryStream ms = new MemoryStream())
        {
            await stream.CopyToAsync(ms);
            avatar.File = ms.ToArray();
        }

        await SaveUserInfoAsync(new UserEdit() { Avatar = avatar }, (user) =>
        {
            LoginDataStorage.SetAvatar(user.Avatar);
        });
    }

    private async Task EditUsernameAsync()
    {
        var input = await GetNewInputAsync();
        if (input.IsEmpty())
        {
            return;
        }
        await SaveUserInfoAsync(new UserEdit() { Username = input }, (user) =>
        {
            LoginDataStorage.SetUsername(user.Username);
        });
    }

    private async Task EditNicknameAsync()
    {
        var input = await GetNewInputAsync();
        if (input.IsEmpty())
        {
            return;
        }
        await SaveUserInfoAsync(new UserEdit() { Nickname = input }, (user) =>
        {
            LoginDataStorage.SetNickname(user.Nickname);
        });
    }

    private async Task<string?> GetNewInputAsync()
    {
        var options = new DialogOptions { ClassBackground = "dialog-backdrop" };
        var dialog = await DialogService.ShowAsync<EditText>("", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            return result.Data as string;
        }
        return default;
    }

    private async Task SaveUserInfoAsync(UserEdit user, Action<User> OnSucceedExecute)
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
        var (UserResult, ErrorMessage) = await UserService.EditUserInfoAsync(user);
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
        if (UserResult == null)
        {
            await DialogService.ShowMessageBox("", ErrorMessage, "确定");
            return;
        }
        OnSucceedExecute.Invoke(UserResult);
    }
}
